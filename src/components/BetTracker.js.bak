import React, { useState, useEffect, useCallback } from 'react';
import { auth } from '../firebaseConfig'; // Assuming firebaseConfig.js is in src/
import { 
  Box, 
  Typography, 
  Paper, 
  Button, 
  Dialog, 
  DialogTitle, 
  DialogContent, 
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  IconButton,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Tab
} from '@mui/material';
import AuthErrorDialog from './auth/AuthErrorDialog';
import { styled } from '@mui/material/styles';
import { get, set, ref, getDatabase, push } from 'firebase/database';
import DeleteIcon from '@mui/icons-material/Delete';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import EditIcon from '@mui/icons-material/Edit';
import BarChartIcon from '@mui/icons-material/BarChart';
import ListIcon from '@mui/icons-material/List';
import BetTrackerCharts from './BetTrackerCharts';
import BetMigrationTool from './BetMigrationTool';
import { useAppTheme } from '../contexts/ThemeContext';

const StyledPaper = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2),
  margin: theme.spacing(2, 0),
  backgroundColor: '#1e1e1e',
  color: '#fff',
}));

const BetTracker = () => {
  const [userId, setUserId] = useState(null);
  const [authErrorOpen, setAuthErrorOpen] = useState(false);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(user => {
      if (user) {
        setUserId(user.uid);
      } else {
        setUserId(null);
        setBets([]); // Clear bets if user logs out
        // Reset stats or other user-specific state here if needed
      }
    });
    return () => unsubscribe(); // Cleanup subscription on unmount
  }, []);

  const { themeMode } = useAppTheme();

  const [unitValue, setUnitValue] = useState(10); // Default unit value
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());

  // Calculate betting statistics - defined before useEffect that uses it
  const calculateStats = useCallback((betsData) => {
    // Filter bets for selected month and year
    const filteredBets = betsData.filter(bet => {
      const betDate = new Date(bet.gameDate);
      return betDate.getMonth() === selectedMonth && betDate.getFullYear() === selectedYear;
    });

    if (!filteredBets || filteredBets.length === 0) {
      setStats({
        totalBets: 0,
        wins: 0,
        losses: 0,
        pushes: 0,
        unitsWagered: 0,
        unitsWon: 0,
        unitsLost: 0,
        roi: 0,
        totalProfit: 0,
      });
      return;
    }

    const totalBets = filteredBets.length;
    const wins = filteredBets.filter(bet => bet.result === 'win').length;
    const losses = filteredBets.filter(bet => bet.result === 'loss').length;
    const pushes = filteredBets.filter(bet => bet.result === 'push').length;
    const unitsWagered = filteredBets.reduce((total, bet) => total + parseFloat(bet.units), 0);
    
    const unitsWon = filteredBets
      .filter(bet => bet.result === 'win')
      .reduce((total, bet) => {
        const odds = parseInt(bet.odds);
        const units = parseFloat(bet.units);
        if (odds > 0) {
          return total + (units * odds / 100);
        } else {
          return total + (units * 100 / Math.abs(odds));
        }
      }, 0);
    
    const unitsLost = filteredBets
      .filter(bet => bet.result === 'loss')
      .reduce((total, bet) => total + parseFloat(bet.units), 0);
    
    const netProfitUnits = unitsWon - unitsLost;
    const totalProfit = Math.round(netProfitUnits * unitValue * 100) / 100;
    const roi = unitsWagered > 0 ? (netProfitUnits / unitsWagered) * 100 : 0;
    
    setStats({
      totalBets,
      wins,
      losses,
      pushes,
      unitsWagered,
      unitsWon,
      unitsLost,
      roi,
      totalProfit,
    });
  }, [unitValue, selectedMonth, selectedYear]); // Removed themeMode, Added selectedMonth, selectedYear

  const [bets, setBets] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [currentBet, setCurrentBet] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [stats, setStats] = useState({
    totalBets: 0,
    wins: 0,
    losses: 0,
    pushes: 0,
    unitsWagered: 0,
    unitsWon: 0,
    unitsLost: 0,
    roi: 0,
    totalProfit: 0,
  });

  // Load unit value from localStorage and set up storage event listener
  useEffect(() => {
    // Function to load unit value from localStorage
    const loadUnitValue = () => {
      const savedUnitValue = localStorage.getItem('unitValue');
      if (savedUnitValue) {
        setUnitValue(parseFloat(savedUnitValue));
      }
    };
    
    // Load initial value
    loadUnitValue();
    
    // Set up storage event listener to detect changes from other tabs/components
    const handleStorageChange = (e) => {
      if (e.key === 'unitValue' && e.newValue) {
        setUnitValue(parseFloat(e.newValue));
      }
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    // Set up an interval to check for changes every second (for same-tab updates)
    const intervalId = setInterval(() => {
      const currentUnitValue = localStorage.getItem('unitValue');
      if (currentUnitValue && parseFloat(currentUnitValue) !== unitValue) {
        setUnitValue(parseFloat(currentUnitValue));
      }
    }, 1000);
    
    // Clean up
    return () => {
      window.removeEventListener('storage', handleStorageChange);
      clearInterval(intervalId);
    };
  }, [unitValue]);
  
  // Fetch bets from Firebase
  // Add a listener for betAdded events to refresh the bet list
  useEffect(() => {
    const handleBetAdded = () => {
      console.log('[BetTracker] Detected betAdded event, refreshing bets');
      fetchBets();
    };

    window.addEventListener('betAdded', handleBetAdded);
    return () => {
      window.removeEventListener('betAdded', handleBetAdded);
    };
  }, [userId]); // Re-attach listener if userId changes

  const fetchBets = async () => {
    if (!userId) {
      console.log("[BetTracker] User not logged in or userId not yet available, cannot fetch bets.");
      setBets([]); // Ensure bets are cleared if no userId
      calculateStats([]); // Recalculate stats with empty bets
      return;
    }
    
    try {
      const db = getDatabase();
      
      // First, try to fetch from user_bet_summaries path (new format)
      const userBetSummariesPath = `user_bet_summaries/${userId}`;
      console.log('[BetTracker] Fetching bets from user_bet_summaries path:', userBetSummariesPath);
      const betSummariesRef = ref(db, userBetSummariesPath);
      const summariesSnapshot = await get(betSummariesRef);
      
      // Then, try to fetch from user_bets path (old format)
      const userBetsPath = `user_bets/${userId}`;
      console.log('[BetTracker] Fetching bets from user_bets path:', userBetsPath);
      const betsRef = ref(db, userBetsPath);
      const snapshot = await get(betsRef);
      
      let betsArray = [];
      
      // Process bets from the new format if they exist (prioritize these)
      if (summariesSnapshot.exists()) {
        const summariesData = summariesSnapshot.val();
        console.log('[BetTracker] Bet summaries data:', summariesData);
        
        const newFormatBets = Object.keys(summariesData).map(key => {
          const [gameId, bookmakerKey] = key.split('_');
          const summary = summariesData[key];
          
          // Extract team information from the bet data
          let homeTeam = summary.homeTeam || '';
          let awayTeam = summary.awayTeam || '';
          let teams = summary.teams || '';
          
          // Try to extract teams from the teams field if it exists and homeTeam/awayTeam are not set
          if (teams && (!homeTeam || !awayTeam)) {
            const teamsMatch = teams.match(/(.+)\s+@\s+(.+)/);
            if (teamsMatch && teamsMatch.length === 3) {
              awayTeam = teamsMatch[1].trim();
              homeTeam = teamsMatch[2].trim();
            }
          }
          
          // If we have homeTeam and awayTeam but no teams string, create it
          if (!teams && homeTeam && awayTeam) {
            teams = `${awayTeam} @ ${homeTeam}`;
          }
          
          // Create a comprehensive bet object with all fields needed for display
          return {
            id: key,
            source: 'user_bet_summaries',
            gameId: gameId,
            sportsbook: bookmakerKey,
            bookmakerTitle: summary.bookmakerTitle || summary.bookmaker || bookmakerKey,
            gameDate: summary.gameDate || summary.commenceTime || new Date().toISOString(),
            teams: teams,
            homeTeam: homeTeam,
            awayTeam: awayTeam,
            market: summary.market || summary.betType || 'Unknown Market',
            betType: summary.betType || summary.market || 'Unknown Type',
            outcome: summary.outcome || summary.team || 'Unknown Outcome',
            team: summary.team || summary.outcome || '',
            odds: summary.odds || summary.price || '0',
            units: summary.units || '1',
            result: summary.result || 'pending',
            notes: summary.notes || '',
            timestamp: summary.timestamp || Date.now(),
            point: summary.point || summary.line || '',
            line: summary.line || summary.point || '',
            ...summary
          };
        });
        
        betsArray = [...betsArray, ...newFormatBets];
        console.log(`[BetTracker] Processed ${newFormatBets.length} bet summaries`);
      }
      
      // Process bets from the old format if they exist
      if (snapshot.exists()) {
        const betsData = snapshot.val();
        const oldFormatBets = Object.keys(betsData).map(key => ({
          id: key,
          source: 'user_bets',
          ...betsData[key]
        }));
        betsArray = [...betsArray, ...oldFormatBets];
        console.log(`[BetTracker] Processed ${oldFormatBets.length} old format bets`);
      }
      
      // Sort by date descending
      betsArray.sort((a, b) => new Date(b.gameDate || Date.now()) - new Date(a.gameDate || Date.now()));
      
      console.log(`[BetTracker] Total bets loaded: ${betsArray.length}`);
      
      if (betsArray.length > 0) {
        setBets(betsArray);
        calculateStats(betsArray);
      } else {
        setBets([]);
        calculateStats([]);
      }
    } catch (error) {
      console.error('[BetTracker] Error fetching bets:', error);
    }
  };
  
  // Load initial value
  loadUnitValue();
  
  // Set up storage event listener to detect changes from other tabs/components
  const handleStorageChange = (e) => {
    if (e.key === 'unitValue' && e.newValue) {
      setUnitValue(parseFloat(e.newValue));
    }
  };
  
  window.addEventListener('storage', handleStorageChange);
  
  // Set up an interval to check for changes every second (for same-tab updates)
  const intervalId = setInterval(() => {
    const currentUnitValue = localStorage.getItem('unitValue');
    if (currentUnitValue && parseFloat(currentUnitValue) !== unitValue) {
      setUnitValue(parseFloat(currentUnitValue));
    }
  }, 1000);
  
  // Clean up
  return () => {
    window.removeEventListener('storage', handleStorageChange);
    clearInterval(intervalId);
  };
}, [unitValue]);
  
// Fetch bets from Firebase
// Add a listener for betAdded events to refresh the bet list
useEffect(() => {
  const handleBetAdded = () => {
    console.log('[BetTracker] Detected betAdded event, refreshing bets');
    fetchBets();
  };

  window.addEventListener('betAdded', handleBetAdded);
  return () => {
    window.removeEventListener('betAdded', handleBetAdded);
  };
}, [userId]); // Re-attach listener if userId changes

const fetchBets = async () => {
  if (!userId) {
    console.log("[BetTracker] User not logged in or userId not yet available, cannot fetch bets.");
    setBets([]); // Ensure bets are cleared if no userId
    calculateStats([]); // Recalculate stats with empty bets
    return;
  }
  
  try {
    const db = getDatabase();
    
    // First, try to fetch from user_bet_summaries path (new format)
    const userBetSummariesPath = `user_bet_summaries/${userId}`;
    console.log('[BetTracker] Fetching bets from user_bet_summaries path:', userBetSummariesPath);
    const betSummariesRef = ref(db, userBetSummariesPath);
    const summariesSnapshot = await get(betSummariesRef);
    
    // Then, try to fetch from user_bets path (old format)
    const userBetsPath = `user_bets/${userId}`;
    console.log('[BetTracker] Fetching bets from user_bets path:', userBetsPath);
    const betsRef = ref(db, userBetsPath);
    const snapshot = await get(betsRef);
    
    let betsArray = [];
    
    // Process bets from the new format if they exist (prioritize these)
    if (summariesSnapshot.exists()) {
      const summariesData = summariesSnapshot.val();
      console.log('[BetTracker] Bet summaries data:', summariesData);
      
      const newFormatBets = Object.keys(summariesData).map(key => {
        const [gameId, bookmakerKey] = key.split('_');
        const summary = summariesData[key];
        
        // Extract team information from the bet data
        let homeTeam = summary.homeTeam || '';
        let awayTeam = summary.awayTeam || '';
        let teams = summary.teams || '';
        
        // Try to extract teams from the teams field if it exists and homeTeam/awayTeam are not set
        if (teams && (!homeTeam || !awayTeam)) {
          const teamsMatch = teams.match(/(.+)\s+@\s+(.+)/);
          if (teamsMatch && teamsMatch.length === 3) {
            awayTeam = teamsMatch[1].trim();
            homeTeam = teamsMatch[2].trim();
          }
        }
        
        // If we have homeTeam and awayTeam but no teams string, create it
        if (!teams && homeTeam && awayTeam) {
          teams = `${awayTeam} @ ${homeTeam}`;
        }
        
        // Create a comprehensive bet object with all fields needed for display
        return {
          id: key,
          source: 'user_bet_summaries',
          gameId: gameId,
          sportsbook: bookmakerKey,
          bookmakerTitle: summary.bookmakerTitle || summary.bookmaker || bookmakerKey,
          gameDate: summary.gameDate || summary.commenceTime || new Date().toISOString(),
          teams: teams,
          homeTeam: homeTeam,
          awayTeam: awayTeam,
          market: summary.market || summary.betType || 'Unknown Market',
          betType: summary.betType || summary.market || 'Unknown Type',
          outcome: summary.outcome || summary.team || 'Unknown Outcome',
          team: summary.team || summary.outcome || '',
          odds: summary.odds || summary.price || '0',
          units: summary.units || '1',
          result: summary.result || 'pending',
          notes: summary.notes || '',
          timestamp: summary.timestamp || Date.now(),
          point: summary.point || summary.line || '',
          line: summary.line || summary.point || '',
          ...summary
        };
      setCurrentBet({
        gameId: '',
        homeTeam: '',
        awayTeam: '',
        gameDate: new Date().toISOString().split('T')[0],
        betType: 'moneyline',
        team: '',
        odds: '',
        units: 1,
        sportsbook: '',
        result: 'pending',
        notes: '',
      });
      setEditMode(false);
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setCurrentBet(null);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentBet(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSaveBet = async () => {
    console.log('[BetTracker] handleSaveBet called.');
    console.log('[BetTracker] User ID:', userId);
    console.log('[BetTracker] Edit Mode:', editMode);
    // Deep copy currentBet (which holds form data) for logging
    const currentBetDataForLog = JSON.parse(JSON.stringify(currentBet));
    console.log('[BetTracker] Form Data (from currentBet state):', currentBetDataForLog);

    if (!userId) {
      console.error('[BetTracker] User not logged in. Cannot save bet.');
      setAuthErrorOpen(true);
      return;
    }

    try {
      const db = getDatabase();
      const userSpecificBetsPath = `user_bets/${userId}`;

      if (editMode) {
        // Ensure currentBet and currentBet.id exist for editing
        if (!currentBet || !currentBet.id) {
          console.error('[BetTracker] Error: Attempting to edit without a valid currentBet.id.');
          return;
        }
        const betPath = `${userSpecificBetsPath}/${currentBet.id}`;
        const betRef = ref(db, betPath);
        // Data to save is from currentBet (which holds form data), ensure original ID and userId are preserved/set
        const updatedBetData = { ...currentBet, id: currentBet.id, userId: userId };

        console.log('[BetTracker] Mode: Edit');
        console.log('[BetTracker] Path for set:', betPath);
        console.log('[BetTracker] Data to save (updatedBetData):', JSON.parse(JSON.stringify(updatedBetData)));
        
        await set(betRef, updatedBetData);
        console.log('[BetTracker] Bet updated successfully.');

      } else {
        // Create new bet
        const userBetsCollectionRef = ref(db, userSpecificBetsPath);
        const newBetPushRef = push(userBetsCollectionRef); // Generates a unique ID
        
        // Data to save is from currentBet (which holds form data), add the new push key as 'id' and include userId
        const newBetData = { ...currentBet, id: newBetPushRef.key, userId: userId };

        console.log('[BetTracker] Mode: Create New');
        console.log('[BetTracker] Path for set (newBetPushRef):', newBetPushRef.toString());
        console.log('[BetTracker] Data to save (newBetData):', JSON.parse(JSON.stringify(newBetData)));
        
        await set(newBetPushRef, newBetData);
        console.log('[BetTracker] New bet saved successfully.');
      }
      
      // After saving, re-fetch bets to update the list and stats
      // This ensures the UI reflects the latest data including the new/updated bet.
      // Consider optimizing this by updating local state directly for better UX.
      const snapshot = await get(ref(db, userSpecificBetsPath));
      if (snapshot.exists()) {
        const betsDataFromDb = snapshot.val();
        const betsArray = Object.keys(betsDataFromDb).map(key => ({
          id: key,
          ...betsDataFromDb[key]
        }));
        betsArray.sort((a, b) => new Date(b.gameDate) - new Date(a.gameDate));
        setBets(betsArray);
        calculateStats(betsArray);
      } else {
        setBets([]);
        calculateStats([]);
      }

      handleCloseDialog(); // Close the dialog form

    } catch (error) {
      console.error('[BetTracker] Error saving bet:', error);
      // Optionally, display a user-friendly error message in the UI
    }
  };

  const handleDeleteBet = async (betIdToDelete, source = 'user_bets') => {
    if (!userId) {
      setAuthErrorOpen(true);
      return;
    }
    try {
      const db = getDatabase();
      let betRef;
      
      // Determine which path to use based on the source of the bet
      if (source === 'user_bet_summaries') {
        betRef = ref(db, `user_bet_summaries/${userId}/${betIdToDelete}`);
        console.log(`[BetTracker] Deleting bet from user_bet_summaries: ${betIdToDelete}`);
      } else {
        betRef = ref(db, `user_bets/${userId}/${betIdToDelete}`);
        console.log(`[BetTracker] Deleting bet from user_bets: ${betIdToDelete}`);
      }
      
      await set(betRef, null); // Delete the bet
      
      // Update local state
      const updatedBets = bets.filter(bet => bet.id !== betIdToDelete);
      setBets(updatedBets);
      calculateStats(updatedBets);
    } catch (error) {
      console.error('Error deleting bet:', error);
    }
  };

  const handleMonthChange = (e) => {
    setSelectedMonth(parseInt(e.target.value));
  };

  const handleYearChange = (e) => {
    setSelectedYear(parseInt(e.target.value));
  };


  const getResultIcon = (result) => {
    switch (result) {
      case 'win': return <CheckCircleIcon color="success" />;
      case 'loss': return <CancelIcon color="error" />;
      case 'push': return <Chip label="PUSH" size="small" />;
      default: return <Chip label="PENDING" size="small" />;
    }
  };

  const formatDate = (dateString) => {
    const options = { month: 'short', day: 'numeric', year: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const currentYear = new Date().getFullYear();
  const years = Array.from({ length: 5 }, (_, i) => currentYear - 2 + i);

  return (
    <Box sx={{ p: 2 }}>
      <Typography variant="h4" gutterBottom>
        Bet Tracker
      </Typography>
      
      {/* Migration Tool - This helps fix permission issues */}
      <BetMigrationTool />
      
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth>
            <InputLabel>Month</InputLabel>
            <Select
              value={selectedMonth}
              label="Month"
              onChange={handleMonthChange}
            >
              {months.map((month, index) => (
                <MenuItem key={index} value={index}>{month}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <FormControl fullWidth>
            <InputLabel>Year</InputLabel>
            <Select
              value={selectedYear}
              label="Year"
              onChange={handleYearChange}
            >
              {years.map(year => (
                <MenuItem key={year} value={year}>{year}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={12} md={6} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
          <Button 
            variant="contained" 
            color="primary" 
            onClick={() => handleOpenDialog()}
            sx={{ height: '100%' }}
          >
            Add New Bet
          </Button>
        </Grid>
      </Grid>
      
      {/* Stats Summary */}
      <StyledPaper elevation={3}>
        <Typography variant="h6" gutterBottom>
          {months[selectedMonth]} {selectedYear} Summary
        </Typography>
        <Grid container spacing={2}>
          <Grid item xs={6} sm={2}>
            <Typography variant="body2">Total Bets</Typography>
            <Typography variant="h6">{stats.totalBets}</Typography>
          </Grid>
          <Grid item xs={6} sm={2}>
            <Typography variant="body2">Record</Typography>
            <Typography variant="h6">{stats.wins}-{stats.losses}{stats.pushes > 0 ? `-${stats.pushes}` : ''}</Typography>
          </Grid>
          <Grid item xs={6} sm={2}>
            <Typography variant="body2">Units Profit/Loss</Typography>
            <Typography 
              variant="h6" 
              color={stats.unitsWon - stats.unitsLost > 0 ? 'success.main' : stats.unitsWon - stats.unitsLost < 0 ? 'error.main' : 'inherit'}
            >
              {(stats.unitsWon - stats.unitsLost).toFixed(2)}
            </Typography>
          </Grid>
          <Grid item xs={6} sm={3}>
            <Typography variant="body2">Total Profit (${unitValue.toFixed(2)}/unit)</Typography>
            <Typography 
              variant="h6" 
              color={stats.unitsWon - stats.unitsLost > 0 ? 'success.main' : stats.unitsWon - stats.unitsLost < 0 ? 'error.main' : 'inherit'}
            >
              ${(parseFloat((stats.unitsWon - stats.unitsLost).toFixed(2)) * unitValue).toFixed(2)}
            </Typography>
          </Grid>
          <Grid item xs={6} sm={3}>
            <Typography variant="body2">ROI</Typography>
            {(() => {
              const netProfitUnitsDisplay = stats.unitsWon - stats.unitsLost;
              const currentRoiDisplay = stats.unitsWagered > 0 ? (netProfitUnitsDisplay / stats.unitsWagered) * 100 : 0;
              return (
                <Typography 
                  variant="h6"
                  color={currentRoiDisplay > 0 ? 'success.main' : currentRoiDisplay < 0 ? 'error.main' : 'inherit'}
                >
                  {currentRoiDisplay.toFixed(2)}%
                </Typography>
              );
            })()}
          </Grid>
        </Grid>
      </StyledPaper>
      
      {/* Tab Navigation */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2, mt: 3 }}>
        <Tabs 
          value={activeTab} 
          onChange={(e, newValue) => setActiveTab(newValue)}
          aria-label="bet tracker tabs"
          sx={{
            '& .MuiTab-root': {
              color: themeMode === 'dark' ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)',
            },
            '& .Mui-selected': {
              color: themeMode === 'dark' ? '#39FF14' : '#007E33',
            },
            '& .MuiTabs-indicator': {
              backgroundColor: themeMode === 'dark' ? '#39FF14' : '#007E33',
            }
          }}
        >
          <Tab 
            icon={<ListIcon />} 
            label="Bet List" 
            id="bet-list-tab"
            aria-controls="bet-list-panel"
          />
          <Tab 
            icon={<BarChartIcon />} 
            label="Analytics" 
            id="analytics-tab"
            aria-controls="analytics-panel"
          />
        </Tabs>
      </Box>
      
      {/* Bet List Tab Panel */}
      <div
        role="tabpanel"
        hidden={activeTab !== 0}
        id="bet-list-panel"
        aria-labelledby="bet-list-tab"
      >
        {activeTab === 0 && (
          <TableContainer component={StyledPaper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Date</TableCell>
                  <TableCell>Game</TableCell>
                  <TableCell>Bet</TableCell>
                  <TableCell>Odds</TableCell>
                  <TableCell>Units</TableCell>
                  <TableCell>Sportsbook</TableCell>
                  <TableCell>Result</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {bets.filter(bet => {
                  const betDate = new Date(bet.gameDate || Date.now());
                  return betDate.getMonth() === selectedMonth && betDate.getFullYear() === selectedYear;
                }).map((bet) => (
                  <TableRow key={bet.id}>
                    <TableCell>{formatDate(bet.gameDate || new Date().toISOString())}</TableCell>
                    <TableCell>
                      {bet.teams || (bet.awayTeam && bet.homeTeam ? `${bet.awayTeam} @ ${bet.homeTeam}` : 'Unknown Teams')}
                    </TableCell>
                    <TableCell>
                      {(() => {
                        // For bet summaries format (including baseball bets)
                        if (bet.source === 'user_bet_summaries') {
                          // Check if we have both market and outcome
                          if (bet.market && bet.outcome) {
                            // Special handling for O/U (total) bets
                            if ((bet.market === 'Total' || bet.betType === 'total') && 
                                (bet.outcome.toLowerCase() === 'over' || bet.outcome.toLowerCase() === 'under')) {
                              const line = bet.point || bet.line || '';
                              return `${bet.outcome} ${line}`;
                            }
                            // Special handling for spread bets
                            else if ((bet.market === 'Spread' || bet.betType === 'spread') && bet.point) {
                              const pointValue = parseFloat(bet.point);
                              return `${bet.outcome} ${pointValue > 0 ? '+' : ''}${pointValue}`;
                            }
                            // Default format for other bet types
                            return `${bet.market}: ${bet.outcome}`;
                          }
                        }
                        
                        // For traditional bet format
                        const trimmedTeam = bet.team ? bet.team.trim() : '';
                        const lowerTrimmedTeam = trimmedTeam.toLowerCase();

                        if (lowerTrimmedTeam === 'over' || lowerTrimmedTeam === 'under') {
                          // This is an Over/Under bet
                          if (typeof bet.line !== 'undefined' && bet.line !== null && String(bet.line).trim() !== '') {
                            return `${trimmedTeam} ${bet.line}`;
                          } else {
                            return `${trimmedTeam} (No Line)`;
                          }
                        } else if (bet.betType === 'moneyline') {
                          return trimmedTeam; // Display trimmed team name
                        } else if (bet.betType === 'spread' && trimmedTeam && typeof bet.line !== 'undefined') {
                          const lineValue = parseFloat(bet.line);
                          return `${trimmedTeam} ${lineValue > 0 ? '+' : ''}${lineValue}`;
                        } else if (bet.betType === 'total' && trimmedTeam) {
                          // Fallback for totals where bet.team might be a team name (data issue)
                          if (typeof bet.line !== 'undefined' && bet.line !== null && String(bet.line).trim() !== '') {
                            return `Total ${bet.line}`;
                          } else {
                            return `Total (No Line)`;
                          }
                        }
                        // Fallback for any other case or missing data
                        return trimmedTeam || bet.outcome || 'N/A';
                      })()}
                    </TableCell>
                    <TableCell>{bet.odds > 0 ? `+${bet.odds}` : bet.odds}</TableCell>
                    <TableCell>{bet.units}</TableCell>
                    <TableCell>{bet.sportsbook}</TableCell>
                    <TableCell>{getResultIcon(bet.result)}</TableCell>
                    <TableCell>
                      <IconButton size="small" onClick={() => handleOpenDialog(bet)}>
                        <EditIcon fontSize="small" />
                      </IconButton>
                      <IconButton 
                        color="error" 
                        size="small" 
                        onClick={() => handleDeleteBet(bet.id, bet.source || 'user_bets')}
                        aria-label="delete bet"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
                {bets.filter(bet => {
                  const betDate = new Date(bet.gameDate || Date.now());
                  return betDate.getMonth() === selectedMonth && betDate.getFullYear() === selectedYear;
                }).length === 0 && (
                  <TableRow>
                    <TableCell colSpan={8} align="center">
                      No bets found for this month
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </div>
      
      {/* Analytics Tab Panel */}
      <div
        role="tabpanel"
        hidden={activeTab !== 1}
        id="analytics-panel"
        aria-labelledby="analytics-tab"
      >
        {activeTab === 1 && (
          <BetTrackerCharts 
            bets={bets} 
            selectedMonth={selectedMonth} 
            selectedYear={selectedYear} 
          />
        )}
      </div>
      
      {/* Add/Edit Bet Dialog */}
      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>{editMode ? 'Edit Bet' : 'Add New Bet'}</DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <TextField
                name="homeTeam"
                label="Home Team"
                fullWidth
                value={currentBet?.homeTeam || ''}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="awayTeam"
                label="Away Team"
                fullWidth
                value={currentBet?.awayTeam || ''}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="gameDate"
                label="Game Date"
                type="date"
                fullWidth
                InputLabelProps={{ shrink: true }}
                value={currentBet?.gameDate || new Date().toISOString().split('T')[0]}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Bet Type</InputLabel>
                <Select
                  name="betType"
                  value={currentBet?.betType || 'moneyline'}
                  label="Bet Type"
                  onChange={handleInputChange}
                >
                  <MenuItem value="moneyline">Moneyline</MenuItem>
                  <MenuItem value="spread">Spread</MenuItem>
                  <MenuItem value="total">Total</MenuItem>
                  <MenuItem value="prop">Prop</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Team</InputLabel>
                <Select
                  name="team"
                  value={currentBet?.team || ''}
                  label="Team"
                  onChange={handleInputChange}
                >
                  <MenuItem value={currentBet?.homeTeam || ''}>{currentBet?.homeTeam || 'Home Team'}</MenuItem>
                  <MenuItem value={currentBet?.awayTeam || ''}>{currentBet?.awayTeam || 'Away Team'}</MenuItem>
                  {currentBet?.betType === 'total' && (
                    <>
                      <MenuItem value="Over">Over</MenuItem>
                      <MenuItem value="Under">Under</MenuItem>
                    </>
                  )}
                </Select>
              </FormControl>
            </Grid>
            {(currentBet?.betType === 'spread' || currentBet?.betType === 'total') && (
              <Grid item xs={12} sm={6}>
                <TextField
                  name="line"
                  label="Line"
                  fullWidth
                  value={currentBet?.line || ''}
                  onChange={handleInputChange}
                  placeholder={currentBet?.betType === 'spread' ? '-3.5' : '224.5'}
                />
              </Grid>
            )}
            <Grid item xs={12} sm={6}>
              <TextField
                name="odds"
                label="Odds (American)"
                fullWidth
                value={currentBet?.odds || ''}
                onChange={handleInputChange}
                placeholder="-110"
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="units"
                label="Units"
                type="number"
                fullWidth
                value={currentBet?.units || 1}
                onChange={handleInputChange}
                inputProps={{ min: 0.1, step: 0.1 }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                name="sportsbook"
                label="Sportsbook"
                fullWidth
                value={currentBet?.sportsbook || ''}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>Result</InputLabel>
                <Select
                  name="result"
                  value={currentBet?.result || 'pending'}
                  label="Result"
                  onChange={handleInputChange}
                >
                  <MenuItem value="pending">Pending</MenuItem>
                  <MenuItem value="win">Win</MenuItem>
                  <MenuItem value="loss">Loss</MenuItem>
                  <MenuItem value="push">Push</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                name="notes"
                label="Notes"
                fullWidth
                multiline
                rows={2}
                value={currentBet?.notes || ''}
                onChange={handleInputChange}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button onClick={handleSaveBet} variant="contained" color="primary">
            {editMode ? 'Update' : 'Add'} Bet
          </Button>
        </DialogActions>
      </Dialog>

      {/* Authentication Error Dialog */}
      <AuthErrorDialog 
        open={authErrorOpen} 
        onClose={() => setAuthErrorOpen(false)} 
        message="You need to be signed in to add or edit bets. Would you like to sign in now?"
      />
    </Box>
  );
};

export default BetTracker;
